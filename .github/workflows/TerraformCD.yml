name: 'TF Rancher Azure-Win Deploy '

on:
  workflow_dispatch:  

jobs:
  terraform:
    name: 'Terraform ${{ matrix.provider }}'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        provider: ['azure-windows']

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.provider }}

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1 
      with:          
    # The hostname of a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file. Defaults to `app.terraform.io`.
        cli_config_credentials_hostname: app.terraform.io # optional, default is app.terraform.io
    # The API token for a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file.
        cli_config_credentials_token: ${{ secrets.tf_api_token }}  # optional
    # The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.
        terraform_version: latest # optional, default is latest
    # Whether or not to install a wrapper to wrap subsequent calls of the `terraform` binary and expose its STDOUT, STDERR, and exit code as outputs named `stdout`, `stderr`, and `exitcode` respectively. Defaults to `true`.
        terraform_wrapper: true # optional, default is true
      

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init -no-color

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -recursive -check

    # Validates the Terraform configuration files
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
              
    - name: Terraform Apply
      id: apply
      run: terraform apply -no-color





